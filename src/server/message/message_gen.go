// Generated by github.com/davyxu/gosproto/sprotogen
// DO NOT EDIT!

package message

import (
	"reflect"

	"fmt"
)

type Hello struct {
	Name string `sproto:"string,0,name=Name"`
}

func (self *Hello) String() string { return fmt.Sprintf("%+v", *self) }

type CSLogin struct {
	UserName string `sproto:"string,0,name=UserName"`

	Password string `sproto:"string,1,name=Password"`
}

func (self *CSLogin) String() string { return fmt.Sprintf("%+v", *self) }

type CSChat struct {
	Content string `sproto:"string,0,name=Content"`
}

func (self *CSChat) String() string { return fmt.Sprintf("%+v", *self) }

type CSMatch struct {
	Mode int32 `sproto:"integer,0,name=Mode"`
}

func (self *CSMatch) String() string { return fmt.Sprintf("%+v", *self) }

type CSEnterGame struct {
	Room int32 `sproto:"integer,0,name=Room"`
}

func (self *CSEnterGame) String() string { return fmt.Sprintf("%+v", *self) }

type CSMove struct {
	Left bool `sproto:"boolean,0,name=Left"`
}

func (self *CSMove) String() string { return fmt.Sprintf("%+v", *self) }

type CSStop struct {
}

func (self *CSStop) String() string { return fmt.Sprintf("%+v", *self) }

type CSFloat struct {
}

func (self *CSFloat) String() string { return fmt.Sprintf("%+v", *self) }

type CSDrop struct {
}

func (self *CSDrop) String() string { return fmt.Sprintf("%+v", *self) }

type SCLogin struct {
	ErrorCode int32 `sproto:"integer,0,name=ErrorCode"`

	UserId int32 `sproto:"integer,1,name=UserId"`
}

func (self *SCLogin) String() string { return fmt.Sprintf("%+v", *self) }

type SCChat struct {
	UserId int32 `sproto:"integer,0,name=UserId"`

	UserName string `sproto:"string,1,name=UserName"`

	Content string `sproto:"string,2,name=Content"`
}

func (self *SCChat) String() string { return fmt.Sprintf("%+v", *self) }

type SCMatch struct {
	Result int32 `sproto:"integer,0,name=Result"`

	Room int32 `sproto:"integer,1,name=Room"`
}

func (self *SCMatch) String() string { return fmt.Sprintf("%+v", *self) }

type SCEnterGame struct {
	Result int32 `sproto:"integer,0,name=Result"`
}

func (self *SCEnterGame) String() string { return fmt.Sprintf("%+v", *self) }

type SCGameStart struct {
	Extend_TimeStamp int64 `sproto:"integer,0,name=Extend_TimeStamp"`
}

func (self *SCGameStart) String() string { return fmt.Sprintf("%+v", *self) }

func (self *SCGameStart) TimeStamp() float64 {
	return float64(self.Extend_TimeStamp) * 0.001000
}
func (self *SCGameStart) SetTimeStamp(v float64) {
	self.Extend_TimeStamp = int64(v * 1000)
}

type SCSpawnUnit struct {
	Iid int32 `sproto:"integer,0,name=Iid"`

	UType int32 `sproto:"integer,1,name=UType"`

	Pos *Vector2D `sproto:"struct,2,name=Pos"`

	FaceLeft bool `sproto:"boolean,3,name=FaceLeft"`

	UFaction int32 `sproto:"integer,4,name=UFaction"`

	UserId int32 `sproto:"integer,5,name=UserId"`
}

func (self *SCSpawnUnit) String() string { return fmt.Sprintf("%+v", *self) }

type SCGameState struct {
	Extend_CurTime int64 `sproto:"integer,0,name=Extend_CurTime"`

	FrameNumber int32 `sproto:"integer,1,name=FrameNumber"`

	UnitStates []*UnitState `sproto:"struct,2,array,name=UnitStates"`
}

func (self *SCGameState) String() string { return fmt.Sprintf("%+v", *self) }

func (self *SCGameState) CurTime() float64 {
	return float64(self.Extend_CurTime) * 0.001000
}
func (self *SCGameState) SetCurTime(v float64) {
	self.Extend_CurTime = int64(v * 1000)
}

type SCMove struct {
	Iid int32 `sproto:"integer,0,name=Iid"`

	Left bool `sproto:"boolean,1,name=Left"`
}

func (self *SCMove) String() string { return fmt.Sprintf("%+v", *self) }

type SCStop struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCStop) String() string { return fmt.Sprintf("%+v", *self) }

type SCFloat struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCFloat) String() string { return fmt.Sprintf("%+v", *self) }

type SCDrop struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCDrop) String() string { return fmt.Sprintf("%+v", *self) }

type SCFire struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCFire) String() string { return fmt.Sprintf("%+v", *self) }

type SCBurst struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCBurst) String() string { return fmt.Sprintf("%+v", *self) }

type SCBlowStart struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCBlowStart) String() string { return fmt.Sprintf("%+v", *self) }

type SCBlowCancel struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCBlowCancel) String() string { return fmt.Sprintf("%+v", *self) }

type SCBlowSuccess struct {
	Iid int32 `sproto:"integer,0,name=Iid"`
}

func (self *SCBlowSuccess) String() string { return fmt.Sprintf("%+v", *self) }

type UserData struct {
	UserId int32 `sproto:"integer,0,name=UserId"`

	UserName string `sproto:"string,1,name=UserName"`

	Level int32 `sproto:"integer,2,name=Level"`

	Money int32 `sproto:"integer,3,name=Money"`
}

func (self *UserData) String() string { return fmt.Sprintf("%+v", *self) }

type Vector2D struct {
	Extend_X int64 `sproto:"integer,0,name=Extend_X"`

	Extend_Y int64 `sproto:"integer,1,name=Extend_Y"`
}

func (self *Vector2D) String() string { return fmt.Sprintf("%+v", *self) }

func (self *Vector2D) X() float64 {
	return float64(self.Extend_X) * 0.001000
}
func (self *Vector2D) SetX(v float64) {
	self.Extend_X = int64(v * 1000)
}

func (self *Vector2D) Y() float64 {
	return float64(self.Extend_Y) * 0.001000
}
func (self *Vector2D) SetY(v float64) {
	self.Extend_Y = int64(v * 1000)
}

type UnitState struct {
	Iid int32 `sproto:"integer,0,name=Iid"`

	Pos *Vector2D `sproto:"struct,1,name=Pos"`

	FaceLeft bool `sproto:"boolean,2,name=FaceLeft"`

	Moving bool `sproto:"boolean,3,name=Moving"`

	Floating bool `sproto:"boolean,4,name=Floating"`

	Blowing bool `sproto:"boolean,5,name=Blowing"`
}

func (self *UnitState) String() string { return fmt.Sprintf("%+v", *self) }

var SProtoStructs = []reflect.Type{

	reflect.TypeOf((*Hello)(nil)).Elem(),         // 1264685742
	reflect.TypeOf((*CSLogin)(nil)).Elem(),       // 1595864157
	reflect.TypeOf((*CSChat)(nil)).Elem(),        // 4197934853
	reflect.TypeOf((*CSMatch)(nil)).Elem(),       // 1298142283
	reflect.TypeOf((*CSEnterGame)(nil)).Elem(),   // 3601048293
	reflect.TypeOf((*CSMove)(nil)).Elem(),        // 2342348589
	reflect.TypeOf((*CSStop)(nil)).Elem(),        // 2569950909
	reflect.TypeOf((*CSFloat)(nil)).Elem(),       // 2822145217
	reflect.TypeOf((*CSDrop)(nil)).Elem(),        // 1597550753
	reflect.TypeOf((*SCLogin)(nil)).Elem(),       // 3671806631
	reflect.TypeOf((*SCChat)(nil)).Elem(),        // 1319198394
	reflect.TypeOf((*SCMatch)(nil)).Elem(),       // 3366302385
	reflect.TypeOf((*SCEnterGame)(nil)).Elem(),   // 890777010
	reflect.TypeOf((*SCGameStart)(nil)).Elem(),   // 2092358196
	reflect.TypeOf((*SCSpawnUnit)(nil)).Elem(),   // 1673979870
	reflect.TypeOf((*SCGameState)(nil)).Elem(),   // 2160077998
	reflect.TypeOf((*SCMove)(nil)).Elem(),        // 1057709714
	reflect.TypeOf((*SCStop)(nil)).Elem(),        // 767061762
	reflect.TypeOf((*SCFloat)(nil)).Elem(),       // 770908731
	reflect.TypeOf((*SCDrop)(nil)).Elem(),        // 3954084126
	reflect.TypeOf((*SCFire)(nil)).Elem(),        // 495666809
	reflect.TypeOf((*SCBurst)(nil)).Elem(),       // 1915957391
	reflect.TypeOf((*SCBlowStart)(nil)).Elem(),   // 4267548854
	reflect.TypeOf((*SCBlowCancel)(nil)).Elem(),  // 15582997
	reflect.TypeOf((*SCBlowSuccess)(nil)).Elem(), // 2675571003
	reflect.TypeOf((*UserData)(nil)).Elem(),      // 651495580
	reflect.TypeOf((*Vector2D)(nil)).Elem(),      // 3976505328
	reflect.TypeOf((*UnitState)(nil)).Elem(),     // 949829372
}

var SProtoEnumValue = map[string]map[int32]string{}
